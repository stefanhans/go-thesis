// Code generated by protoc-gen-go. DO NOT EDIT.
// source: chat-group.proto

package subscribergroup

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Subscriber struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Ip                   string   `protobuf:"bytes,2,opt,name=ip" json:"ip,omitempty"`
	Port                 string   `protobuf:"bytes,3,opt,name=port" json:"port,omitempty"`
	Leader               bool     `protobuf:"varint,4,opt,name=leader" json:"leader,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Subscriber) Reset()         { *m = Subscriber{} }
func (m *Subscriber) String() string { return proto.CompactTextString(m) }
func (*Subscriber) ProtoMessage()    {}
func (*Subscriber) Descriptor() ([]byte, []int) {
	return fileDescriptor_subscriber_group_4bc484b3ba9822f3, []int{0}
}
func (m *Subscriber) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Subscriber.Unmarshal(m, b)
}
func (m *Subscriber) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Subscriber.Marshal(b, m, deterministic)
}
func (dst *Subscriber) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Subscriber.Merge(dst, src)
}
func (m *Subscriber) XXX_Size() int {
	return xxx_messageInfo_Subscriber.Size(m)
}
func (m *Subscriber) XXX_DiscardUnknown() {
	xxx_messageInfo_Subscriber.DiscardUnknown(m)
}

var xxx_messageInfo_Subscriber proto.InternalMessageInfo

func (m *Subscriber) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Subscriber) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *Subscriber) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

func (m *Subscriber) GetLeader() bool {
	if m != nil {
		return m.Leader
	}
	return false
}

type SubscriberList struct {
	// creates a slice of Subscriber
	Subscriber           []*Subscriber `protobuf:"bytes,1,rep,name=subscriber" json:"subscriber,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *SubscriberList) Reset()         { *m = SubscriberList{} }
func (m *SubscriberList) String() string { return proto.CompactTextString(m) }
func (*SubscriberList) ProtoMessage()    {}
func (*SubscriberList) Descriptor() ([]byte, []int) {
	return fileDescriptor_subscriber_group_4bc484b3ba9822f3, []int{1}
}
func (m *SubscriberList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscriberList.Unmarshal(m, b)
}
func (m *SubscriberList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscriberList.Marshal(b, m, deterministic)
}
func (dst *SubscriberList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscriberList.Merge(dst, src)
}
func (m *SubscriberList) XXX_Size() int {
	return xxx_messageInfo_SubscriberList.Size(m)
}
func (m *SubscriberList) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscriberList.DiscardUnknown(m)
}

var xxx_messageInfo_SubscriberList proto.InternalMessageInfo

func (m *SubscriberList) GetSubscriber() []*Subscriber {
	if m != nil {
		return m.Subscriber
	}
	return nil
}

type Tweet struct {
	Sender               *Subscriber `protobuf:"bytes,1,opt,name=sender" json:"sender,omitempty"`
	Text                 string      `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Tweet) Reset()         { *m = Tweet{} }
func (m *Tweet) String() string { return proto.CompactTextString(m) }
func (*Tweet) ProtoMessage()    {}
func (*Tweet) Descriptor() ([]byte, []int) {
	return fileDescriptor_subscriber_group_4bc484b3ba9822f3, []int{2}
}
func (m *Tweet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Tweet.Unmarshal(m, b)
}
func (m *Tweet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Tweet.Marshal(b, m, deterministic)
}
func (dst *Tweet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tweet.Merge(dst, src)
}
func (m *Tweet) XXX_Size() int {
	return xxx_messageInfo_Tweet.Size(m)
}
func (m *Tweet) XXX_DiscardUnknown() {
	xxx_messageInfo_Tweet.DiscardUnknown(m)
}

var xxx_messageInfo_Tweet proto.InternalMessageInfo

func (m *Tweet) GetSender() *Subscriber {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *Tweet) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

// Empty message type used for List method
type Void struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Void) Reset()         { *m = Void{} }
func (m *Void) String() string { return proto.CompactTextString(m) }
func (*Void) ProtoMessage()    {}
func (*Void) Descriptor() ([]byte, []int) {
	return fileDescriptor_subscriber_group_4bc484b3ba9822f3, []int{3}
}
func (m *Void) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Void.Unmarshal(m, b)
}
func (m *Void) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Void.Marshal(b, m, deterministic)
}
func (dst *Void) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Void.Merge(dst, src)
}
func (m *Void) XXX_Size() int {
	return xxx_messageInfo_Void.Size(m)
}
func (m *Void) XXX_DiscardUnknown() {
	xxx_messageInfo_Void.DiscardUnknown(m)
}

var xxx_messageInfo_Void proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Subscriber)(nil), "subscribergroup.Subscriber")
	proto.RegisterType((*SubscriberList)(nil), "subscribergroup.SubscriberList")
	proto.RegisterType((*Tweet)(nil), "subscribergroup.Tweet")
	proto.RegisterType((*Void)(nil), "subscribergroup.Void")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SubscribersClient is the client API for Subscribers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SubscribersClient interface {
	List(ctx context.Context, in *Void, opts ...grpc.CallOption) (*SubscriberList, error)
	Subscribe(ctx context.Context, in *Subscriber, opts ...grpc.CallOption) (*Subscriber, error)
	Send(ctx context.Context, in *Tweet, opts ...grpc.CallOption) (*SubscriberList, error)
}

type subscribersClient struct {
	cc *grpc.ClientConn
}

func NewSubscribersClient(cc *grpc.ClientConn) SubscribersClient {
	return &subscribersClient{cc}
}

func (c *subscribersClient) List(ctx context.Context, in *Void, opts ...grpc.CallOption) (*SubscriberList, error) {
	out := new(SubscriberList)
	err := c.cc.Invoke(ctx, "/subscribergroup.Subscribers/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscribersClient) Subscribe(ctx context.Context, in *Subscriber, opts ...grpc.CallOption) (*Subscriber, error) {
	out := new(Subscriber)
	err := c.cc.Invoke(ctx, "/subscribergroup.Subscribers/Subscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscribersClient) Send(ctx context.Context, in *Tweet, opts ...grpc.CallOption) (*SubscriberList, error) {
	out := new(SubscriberList)
	err := c.cc.Invoke(ctx, "/subscribergroup.Subscribers/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubscribersServer is the server API for Subscribers service.
type SubscribersServer interface {
	List(context.Context, *Void) (*SubscriberList, error)
	Subscribe(context.Context, *Subscriber) (*Subscriber, error)
	Send(context.Context, *Tweet) (*SubscriberList, error)
}

func RegisterSubscribersServer(s *grpc.Server, srv SubscribersServer) {
	s.RegisterService(&_Subscribers_serviceDesc, srv)
}

func _Subscribers_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscribersServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/subscribergroup.Subscribers/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscribersServer).List(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Subscribers_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Subscriber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscribersServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/subscribergroup.Subscribers/Subscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscribersServer).Subscribe(ctx, req.(*Subscriber))
	}
	return interceptor(ctx, in, info, handler)
}

func _Subscribers_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tweet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscribersServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/subscribergroup.Subscribers/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscribersServer).Send(ctx, req.(*Tweet))
	}
	return interceptor(ctx, in, info, handler)
}

var _Subscribers_serviceDesc = grpc.ServiceDesc{
	ServiceName: "subscribergroup.Subscribers",
	HandlerType: (*SubscribersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _Subscribers_List_Handler,
		},
		{
			MethodName: "Subscribe",
			Handler:    _Subscribers_Subscribe_Handler,
		},
		{
			MethodName: "Send",
			Handler:    _Subscribers_Send_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chat-group.proto",
}

func init() {
	proto.RegisterFile("chat-group.proto", fileDescriptor_subscriber_group_4bc484b3ba9822f3)
}

var fileDescriptor_subscriber_group_4bc484b3ba9822f3 = []byte{
	// 259 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xc1, 0x4b, 0xc3, 0x30,
	0x14, 0xc6, 0x97, 0x2e, 0x16, 0xf7, 0x06, 0x13, 0x1e, 0x58, 0xc2, 0x3c, 0x58, 0x72, 0xea, 0xc5,
	0x1e, 0xb6, 0xa3, 0x17, 0x3d, 0x79, 0x51, 0x90, 0x4e, 0x3c, 0x79, 0x59, 0xed, 0x43, 0x02, 0xda,
	0x84, 0x24, 0x43, 0xff, 0x57, 0xff, 0x19, 0x49, 0x2c, 0x8b, 0x38, 0xa8, 0xde, 0x5e, 0xbe, 0x7c,
	0xdf, 0x97, 0x5f, 0x12, 0x28, 0xdc, 0xae, 0x75, 0xcf, 0x56, 0xb5, 0x64, 0x2f, 0x5e, 0xac, 0xde,
	0x99, 0xda, 0x58, 0xed, 0x35, 0x9e, 0x24, 0x3d, 0xca, 0xf2, 0x09, 0x60, 0xb3, 0x97, 0x10, 0x81,
	0xf7, 0xdb, 0x37, 0x12, 0xac, 0x64, 0xd5, 0xac, 0x89, 0x33, 0x2e, 0x20, 0x53, 0x46, 0x64, 0x51,
	0xc9, 0x94, 0x09, 0x1e, 0xa3, 0xad, 0x17, 0xd3, 0x6f, 0x4f, 0x98, 0xb1, 0x80, 0xfc, 0x95, 0xb6,
	0x1d, 0x59, 0xc1, 0x4b, 0x56, 0x1d, 0x37, 0xc3, 0x4a, 0xde, 0xc1, 0x22, 0xb5, 0xdf, 0x2a, 0xe7,
	0xf1, 0x12, 0x20, 0x21, 0x08, 0x56, 0x4e, 0xab, 0xf9, 0xea, 0xac, 0xfe, 0x45, 0x55, 0xa7, 0x50,
	0xf3, 0xc3, 0x2e, 0xef, 0xe1, 0xe8, 0xe1, 0x9d, 0xc8, 0xe3, 0x1a, 0x72, 0x47, 0x7d, 0x17, 0x1b,
	0xd8, 0x5f, 0x0d, 0x83, 0x35, 0x80, 0x7b, 0xfa, 0xf0, 0xc3, 0x55, 0xe2, 0x2c, 0x73, 0xe0, 0x8f,
	0x5a, 0x75, 0xab, 0x4f, 0x06, 0xf3, 0x14, 0x71, 0x78, 0x05, 0x3c, 0xe2, 0x9e, 0x1e, 0x14, 0x07,
	0xfb, 0xf2, 0x7c, 0xe4, 0xbc, 0x90, 0x93, 0x13, 0xbc, 0x81, 0xd9, 0x5e, 0xc3, 0x31, 0xbe, 0xe5,
	0xd8, 0xa6, 0x9c, 0xe0, 0x35, 0xf0, 0x0d, 0xf5, 0x1d, 0x16, 0x07, 0xb6, 0xf8, 0x16, 0xff, 0x60,
	0x69, 0xf3, 0xf8, 0xf9, 0xeb, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9c, 0x9f, 0xd0, 0x04, 0x16,
	0x02, 0x00, 0x00,
}
